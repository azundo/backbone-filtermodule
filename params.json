{"name":"Backbone-filtermodule","tagline":"A simple reusable module to for filtering collections within a view.","body":"##Example\r\n\r\nCheck it out in action at [http://azundo.github.io/backbone-filtermodule/examples/shapes.html](http://azundo.github.io/backbone-filtermodule/examples/shapes.html)\r\n\r\n##Usage\r\n\r\nBackbone filtermodule contains several components making up a filtered view.  Each filter control has a model for storing state and a view for interacting\r\nwith the filter. There is a container view which holds the collection to be\r\nfiltered, and each model in the collection also has a view. The container view\r\nlistens to changes on the filters and updates the subview of each item\r\naccordingly.\r\n\r\n###Step By Step\r\n\r\nSee the shapes example in the examples/ directory for a working example.\r\n\r\n1. Create filters and add them to a collection.\r\n    ```javascript\r\n    var genreFilterModel = new Backbone.FilterModule.FilterModel({\r\n            name: 'genre',\r\n            choices: [\r\n                {value: 'mystery', text: 'Mystery'},\r\n                {value: 'romance', text: 'Romance'},\r\n                {value: 'thriller', text: 'Thriller'},\r\n                {value: 'biography', text: 'Biography'}\r\n            ]\r\n        });\r\n    var authorFilterModel = new Backbone.FilterModule.FilterModel({\r\n        ...\r\n    });\r\n\r\n    var filterCollection = new Backbone.FilterModule.FilterCollection([\r\n            genreFilterModel, authorFilterModel]);\r\n    ```\r\n\r\n2. Create views for each filter control and render them, supplying a template.\r\n    ```javascript\r\n    var genreFilterView = new Backbone.FilterModule.FilterView({\r\n            model: genreFilterModel,\r\n            template: _.template($('#genre-filter-template').text()),\r\n            el: '#genre-filter'}).render();\r\n    var authorFilterView = new Backbone.FilterModule.FilterView({\r\n            model: authorFilterModel,\r\n            template: _.template($('#author-filter-template').text()),\r\n            el: '#author-filter'}).render();\r\n    ```\r\n3. Create a collection of items to be filtered on\r\n    ```javascript\r\n    var bookCollection = new Backbone.Collection([\r\n        {\r\n            genre: 'thriller',\r\n            author: 'King, Stephen'\r\n        },\r\n        {\r\n            genre: 'mystery,\r\n            author: ...\r\n        }\r\n    ]);\r\n    ```\r\n\r\n4. Create View classes for your list items and item list.\r\n    ```javascript\r\n    var MyItemView = Backbone.View.extend({\r\n        template: _.template($('#item-view').text()),\r\n        render: function () {\r\n            this.$el.html(this.template(this.toJSON));\r\n            return this;\r\n        }\r\n    });\r\n    var MyFilteredListView = Backbone.FilterModule.FilteredListView.extend({\r\n        ItemView: MyItemView\r\n    });\r\n    ```\r\n\r\n5. Create and render the filteredListView with your filter collection and item collection\r\n    ```javascript\r\n    var filteredListView = new FilteredListView({\r\n        el: '#filter-el',\r\n        collection: bookCollection,\r\n        filterCollection: filterCollection\r\n    }).render();\r\n    ```\r\n\r\n6. Reset the item collection to get things going.\r\n    ```javascript\r\n    filterCollection.trigger('reset');\r\n    ```\r\n    Will respond to resetting the item collection, adding or removing items from the collection or modifying the filters.\r\n\r\n###Customization\r\n\r\nThe default implementation of `FilterModule.FilterListView` provides animation\r\nalgorithms for entering, updating and leaving items, as well as functions for\r\nevaluating whether or not an item passes the filter tests. You may want to\r\ncustomize these by overriding any or all of the methods not declared in\r\n`FilterModule.BaseFilterListView`. See the source for more specifics and to see\r\nthe reference implementation of `FilterModule.FilterListView`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}